# Set the minimum required version of CMake
CMAKE_MINIMUM_REQUIRED(VERSION 3.20 FATAL_ERROR)

# Set the project
PROJECT(MyEngine VERSION 0.0.4 LANGUAGES CXX)
MESSAGE(STATUS "Project: ${PROJECT_NAME} ${PROJECT_VERSION}")

# Add 'd' postfix for debug builds
SET(CMAKE_DEBUG_POSTFIX "d")

# Set C++ version
SET(CMAKE_CXX_STANDARD 17)
SET(CMAKE_CXX_STANDARD_REQUIRED ON)

IF (MSVC)
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /permissive-")
ENDIF ()

# Set the output directories
SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY "${PROJECT_SOURCE_DIR}/bin")
SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY_DEBUG "${PROJECT_SOURCE_DIR}/bin")
SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE "${PROJECT_SOURCE_DIR}/bin")
SET(CMAKE_ARCHIVE_OUTPUT_DIRECTORY "${PROJECT_SOURCE_DIR}/lib")
SET(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_DEBUG "${PROJECT_SOURCE_DIR}/lib")
SET(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_RELEASE "${PROJECT_SOURCE_DIR}/lib")
SET(CMAKE_LIBRARY_OUTPUT_DIRECTORY "${PROJECT_SOURCE_DIR}/lib")
SET(CMAKE_LIBRARY_OUTPUT_DIRECTORY_DEBUG "${PROJECT_SOURCE_DIR}/lib")
SET(CMAKE_LIBRARY_OUTPUT_DIRECTORY_RELEASE "${PROJECT_SOURCE_DIR}/lib")

# Turn on the Visual Studio folders
SET_PROPERTY(GLOBAL PROPERTY USE_FOLDERS ON)

# Add CMake modules
INCLUDE(FETCHCONTENT)

MESSAGE(STATUS "Looking for: MyCMake 0.4.2")
FIND_PACKAGE(MyCMake 0.4.2 QUIET)
IF (${MyCMake_FOUND})
    MESSAGE(STATUS "MyCMake v${PACKAGE_VERSION} found")
ELSE ()
    SET(ADDRESS "https://github.com/shimakaze09/MyCMake.git")
    MESSAGE(STATUS "MyCMake 0.4.2 not found\n"
            "fetch from ${ADDRESS} with tag 0.4.2")
    FETCHCONTENT_DECLARE(
            MyCMake
            GIT_REPOSITORY ${ADDRESS}
            GIT_TAG "0.4.2"
    )
    message(STATUS "Building MyCMake 0.4.2")
    FETCHCONTENT_MAKEAVAILABLE(MyCMake)
    MESSAGE(STATUS "MyCMake 0.4.2 built")
ENDIF ()

# Set default build path prefix
INIT_INSTALL_PREFIX()

DOWNLOAD_ZIP(
        https://cdn.jsdelivr.net/gh/shimakaze09/MyData@main/MyEngine/imgui.zip
        imgui.zip
        SHA256 9E134D8DBE8FD94A292DDD313A80BA77C113CD4756B4429777169C147401E200
)

MESSAGE(STATUS "----------")
FIND_PACKAGE(glfw3 REQUIRED)
IF (TARGET glfw)
    MESSAGE(STATUS "glfw3_FOUND: ${glfw3_FOUND}")
    MESSAGE(STATUS "glfw3_DIR: ${glfw3_DIR}")
ENDIF ()

ADD_DEP(MyRTR 0.0.7)

ADD_SUB_DIRS_REC(src)

EXPORT_TARGETS(DIRECTORIES "include")